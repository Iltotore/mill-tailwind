import mill.define.Ctx
import mill.define.Cross.ToSegments
import $ivy.`io.chris-kipp::mill-ci-release::0.2.1`
import mill._, scalalib._, publish._
import io.kipp.mill.ci.release.CiReleaseModule

case class Versions(scala: String, mill: String, millPlatform: String)

implicit val versionsToSegments: ToSegments[Versions] =
  new ToSegments[Versions](versions => List(versions.millPlatform))

trait BaseModule extends ScalaModule with CiReleaseModule with Cross.Module[Versions] {

  def scalaVersion = crossValue.scala

  override implicit def millModuleBasePath: Ctx.BasePath =
    Ctx.BasePath(millOuterCtx.millSourcePath / s"mill-${crossValue.millPlatform}")

  def compileIvyDeps =
    if(crossValue.millPlatform.toDouble >= 1.0)
      Agg(
        ivy"com.lihaoyi::mill-libs:${crossValue.mill}"
      )
    else
      Agg(
        ivy"com.lihaoyi::mill-main:${crossValue.mill}",
        ivy"com.lihaoyi::mill-scalalib:${crossValue.mill}"
      )

  def artifactSuffix = T { s"_mill${crossValue.millPlatform}${super.artifactSuffix()}" }

  def pomSettings =
    PomSettings(
      description = "Tailwind & DaisyUI plugin for Mill, without Node",
      organization = "io.github.iltotore",
      url = "https://github.com/Iltotore/mill-tailwind",
      licenses = Seq(License.`Apache-2.0`),
      versionControl = VersionControl.github("Iltotore", "mill-tailwind"),
      developers = Seq(
        Developer("Iltotore", "RaphaÃ«l FROMENTIN", "https://github.com/Iltotore")
      )
    )
}

object main extends  Cross[BaseModule](
  Versions("3.7.3", "1.0.6", "1.0"),
  Versions("2.13.16", "0.11.0", "0.11"),
) {
  def artifactName = "mill-tailwind"
}